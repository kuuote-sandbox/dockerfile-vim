name: 'Docker Build'
on:
  workflow_dispatch:
    inputs:
      vim_version:
        description: 'Target version of Vim'
        required: true

jobs:
  build-and-push:
    name: 'Build ${{ matrix.image_type }} on ${{ matrix.base }}'
    strategy:
      matrix:
        image_type: ['full']
        base: ['alpine']
      fail-fast: false
    runs-on: 'ubuntu-20.04'
    env:
      CACHE_IMAGE_NAME: 'ghcr.io/${{ github.repository_owner }}/vim'
      HUB_IMAGE_NAME: 'thinca/vim'
      GHCR_IMAGE_NAME: 'ghcr.io/${{ github.repository_owner }}/vim'
    steps:
      - name: 'Prepare variables'
        run: |
          INPUT_REF='${{ github.event.inputs.vim_version }}'
          : ${INPUT_REF:=${GITHUB_REF}}
          ORIGINAL_TAG=${INPUT_REF##*/}
          VIM_VERSION=${ORIGINAL_TAG%+*}

          echo "VIM_VERSION=${VIM_VERSION}" >> ${GITHUB_ENV}
          echo "CACHE_IMAGE_ICONV=${CACHE_IMAGE_NAME}:stage-cache-iconv-${{ matrix.base }}" >> ${GITHUB_ENV}
          echo "CACHE_IMAGE_PREPARE=${CACHE_IMAGE_NAME}:stage-cache-prepare-${{ matrix.image_type }}-${{ matrix.base }}" >> ${GITHUB_ENV}

      - uses: 'actions/checkout@v2'
      - uses: 'mxschmitt/action-tmate@v3'
      - name: 'Build'
        env:
          DOCKER_BUILDKIT: '1'
        run: |
          build() {
            local target=$1
            local cache_from=
            if [[ -n "$2" ]]; then
              cache_from="--cache-from=$2"
            fi
            echo "-- build ${target} --"
            docker build \
              --tag "vim:${target}" \
              --target "${target}" \
              ${cache_from} \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --build-arg "VIM_VERSION=${VIM_VERSION}" \
              --build-arg "VIM_ENABLE_ALL=${{ matrix.image_type == 'full' && 'yes' || '' }}" \
              --build-arg "VIM_COMPILEDBY=Docker <https://github.com/thinca/dockerfile-vim>" \
              --progress plain \
              ./${{ matrix.base }}
          }

          if [[ "${{ matrix.base }}" == "alpine" ]]; then
          #build iconv "${CACHE_IMAGE_ICONV}"
            :
          fi
          build release
